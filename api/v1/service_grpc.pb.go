// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KramerServiceClient is the client API for KramerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KramerServiceClient interface {
	GetUserDetails(ctx context.Context, in *UserDetailsRequest, opts ...grpc.CallOption) (*UserDetailsResponse, error)
}

type kramerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKramerServiceClient(cc grpc.ClientConnInterface) KramerServiceClient {
	return &kramerServiceClient{cc}
}

func (c *kramerServiceClient) GetUserDetails(ctx context.Context, in *UserDetailsRequest, opts ...grpc.CallOption) (*UserDetailsResponse, error) {
	out := new(UserDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.v1.KramerService/GetUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KramerServiceServer is the server API for KramerService service.
// All implementations must embed UnimplementedKramerServiceServer
// for forward compatibility
type KramerServiceServer interface {
	GetUserDetails(context.Context, *UserDetailsRequest) (*UserDetailsResponse, error)
	mustEmbedUnimplementedKramerServiceServer()
}

// UnimplementedKramerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKramerServiceServer struct {
}

func (UnimplementedKramerServiceServer) GetUserDetails(context.Context, *UserDetailsRequest) (*UserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedKramerServiceServer) mustEmbedUnimplementedKramerServiceServer() {}

// UnsafeKramerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KramerServiceServer will
// result in compilation errors.
type UnsafeKramerServiceServer interface {
	mustEmbedUnimplementedKramerServiceServer()
}

func RegisterKramerServiceServer(s grpc.ServiceRegistrar, srv KramerServiceServer) {
	s.RegisterService(&KramerService_ServiceDesc, srv)
}

func _KramerService_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KramerServiceServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.KramerService/GetUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KramerServiceServer).GetUserDetails(ctx, req.(*UserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KramerService_ServiceDesc is the grpc.ServiceDesc for KramerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KramerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.KramerService",
	HandlerType: (*KramerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDetails",
			Handler:    _KramerService_GetUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}
